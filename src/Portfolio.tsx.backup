import React, { useState, useEffect, useRef } from "react";
import { portfolioData } from "./data/portfolioData";
import { getProjects, getSkills, type Project, type Skill } from "./lib/supabase";
import { socialIcons } from "./components/icons/SocialIcons";
import { type Theme, type SectionId } from "./types/portfolioTypes";
import { Navbar } from "./components/Navbar";
import { ProjectCard } from "./components/ProjectCard";
import { SocialLink } from "./components/SocialLink";
import { SkillBar } from "./components/SkillBar";
import { NotificationSystem } from "./components/NotificationSystem";
import { AppProvider } from "./contexts/AppContext";
import { useNotifications } from "./hooks/useAppContext";
import { copyToClipboard } from "./utils/clipboard";
import {
  getInitialTheme,
  saveTheme,
  applyTheme,
  listenForSystemThemeChanges,
} from "./utils/theme";

const PortfolioContent: React.FC = () => {ponents/icons/SocialIcons";
import { type Theme, type SectionId } from "./types/portfolioTypes";
import { Navbar } from "./components/Navbar";
import { ProjectCard } from "./components/ProjectCard";
import { SocialLink } from "./components/SocialLink";
import { SkillBar } from "./components/SkillBar";
import { NotificationSystem } from "./components/NotificationSystem";
import { AppProvider } from "./contexts/AppContext";
import { useNotifications } from "./hooks/useAppContext";
import { copyToClipboard } from "./utils/clipboard";
import {
  getInitialTheme,
  saveTheme,
  applyTheme,
  listenForSystemThemeChanges,
} from "./utils/theme";

const PortfolioContent: React.FC = () => {
  const [activeSection, setActiveSection] = useState<SectionId>("home");
  const [copyTooltipVisible, setCopyTooltipVisible] = useState<boolean>(false);
  const [theme, setTheme] = useState<Theme>(() => getInitialTheme());
  const [easterEggCount, setEasterEggCount] = useState<number>(0);
  const [projects, setProjects] = useState<Project[]>([]);
  const [skills, setSkills] = useState<Skill[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const heroTextRef = useRef<HTMLHeadingElement>(null);
  const lastNotificationRef = useRef<number>(0);
  const { addNotification } = useNotifications();

  // Load data from Supabase
  useEffect(() => {
    const loadData = async () => {
      try {
        const [projectsData, skillsData] = await Promise.all([
          getProjects(),
          getSkills(),
        ]);
        setProjects(projectsData);
        setSkills(skillsData);
      } catch (error) {
        console.error('Failed to load data:', error);
        // Fallback to static data if Supabase fails
        setProjects(portfolioData.projects.map(project => ({
          ...project,
          id: Math.random().toString(),
          sort_order: 0,
          is_featured: false,
          is_active: true,
          created_at: '',
          updated_at: ''
        })));
        setSkills(portfolioData.skills.map((skill, index) => ({
          ...skill,
          id: Math.random().toString(),
          sort_order: index,
          is_active: true,
          created_at: '',
          updated_at: ''
        })));
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  const toggleTheme = (): void => {
    setTheme((prev) => {
      const newTheme = prev === "dark" ? "light" : "dark";
      saveTheme(newTheme);

      // Debounce notifications - only show if 500ms have passed since last notification
      const now = Date.now();
      if (now - lastNotificationRef.current > 500) {
        addNotification({
          type: "info",
          message: `Switched to ${newTheme} mode`,
          duration: 2000,
        });
        lastNotificationRef.current = now;
      }

      return newTheme;
    });
  };

  // Easter egg handler
  const handleEasterEgg = () => {
    const newCount = easterEggCount + 1;
    setEasterEggCount(newCount);

    if (newCount === 5) {
      addNotification({
        type: "success",
        message: "Easter egg unlocked! You found the secret!",
        duration: 4000,
      });
    } else if (newCount === 10) {
      addNotification({
        type: "warning",
        message: "You're persistent! I like that! Keep exploring!",
        duration: 3000,
      });
    } else if (newCount >= 15) {
      addNotification({
        type: "info",
        message: "Achievement unlocked: Professional Clicker!",
        duration: 3000,
      });
      setEasterEggCount(0); // Reset counter
    }
  };

  // Handle section navigation with notifications
  const handleSectionNavigation = (sectionId: string) => {
    const sectionNames: { [key: string]: string } = {
      home: "Welcome",
      about: "About Me",
      experience: "Experience",
      toolkit: "Skills & Tools",
      work: "Projects",
      socials: "Social Links",
      contact: "Contact",
    };

    // Scroll to the section
    const targetElement = document.getElementById(sectionId);
    if (targetElement) {
      targetElement.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }

    // Show navigation notification
    if (sectionNames[sectionId]) {
      addNotification({
        type: "info",
        message: `Navigated to ${sectionNames[sectionId]}`,
        duration: 1500,
      });
    }
  };

  // Apply theme to body and listen for system changes
  useEffect(() => {
    applyTheme(theme);
  }, [theme]);

  // Listen for system theme changes
  useEffect(() => {
    const cleanup = listenForSystemThemeChanges((systemTheme) => {
      setTheme(systemTheme);
    });

    return cleanup;
  }, []);

  // Hero text effect and section observer
  useEffect(() => {
    const allSections = document.querySelectorAll("header, .section");
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("is-visible");
            setActiveSection(entry.target.id as SectionId);
          }
        });
      },
      { root: null, rootMargin: "0px", threshold: 0.4 }
    );
    allSections.forEach((section) => observer.observe(section));
    return () => observer.disconnect();
  }, []);

  const handleCopy = async (textToCopy: string): Promise<void> => {
    try {
      const success = await copyToClipboard(textToCopy);
      if (success) {
        setCopyTooltipVisible(true);
        setTimeout(() => setCopyTooltipVisible(false), 2000);
        addNotification({
          type: "success",
          message: "Copied to clipboard",
          duration: 3000,
        });
      } else {
        addNotification({
          type: "error",
          message: "Failed to copy to clipboard",
          duration: 4000,
        });
        console.error("Failed to copy text to clipboard");
      }
    } catch (err) {
      addNotification({
        type: "error",
        message: "Error copying to clipboard",
        duration: 4000,
      });
      console.error("Failed to copy text: ", err);
    }
  };

  const currentYear = new Date().getFullYear();

  return (
    <div className="antialiased">
      {/* Skip to main content link for accessibility */}
      <a
        href="#main-content"
        className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-accent-color focus:text-accent-color-dark focus:rounded"
      >
        Skip to main content
      </a>

      {/* Navigation */}
      <Navbar
        name={portfolioData.name}
        navLinks={portfolioData.navLinks}
        activeSection={activeSection}
        theme={theme}
        onSectionNavigation={handleSectionNavigation}
        onEasterEgg={handleEasterEgg}
        onToggleTheme={toggleTheme}
      />

      <header id="home" className="hero-section">
        <div className="hero-background">
          <div className="gradient-orb orb-1"></div>
          <div className="gradient-orb orb-2"></div>
          <div className="gradient-orb orb-3"></div>
          <div className="floating-particles">
            {[...Array(12)].map((_, i) => (
              <div key={i} className={`particle particle-${i + 1}`}></div>
            ))}
          </div>
        </div>

        <div className="hero-content">
          <div className="hero-greeting">
            <span className="greeting-text">
              <span className="greeting-dot"></span> Hello, I'm
            </span>
          </div>

          <h1 className="hero-name" ref={heroTextRef}>
            {portfolioData.name}
            <span className="name-highlight"></span>
          </h1>

          <div className="hero-subtitle">
            <span className="subtitle-text">Full-Stack Developer</span>
            <span className="subtitle-accent">& Digital Creator</span>
          </div>

          <div className="hero-description">
            <p>
              Crafting beautiful digital experiences with modern web
              technologies and creative solutions
            </p>
          </div>

          <div className="hero-stats">
            <div className="stat-item">
              <span className="stat-number">3+</span>
              <span className="stat-label">Years Experience</span>
            </div>
            <div className="stat-divider"></div>
            <div className="stat-item">
              <span className="stat-number">50+</span>
              <span className="stat-label">Projects Completed</span>
            </div>
            <div className="stat-divider"></div>
            <div className="stat-item">
              <span className="stat-number">15+</span>
              <span className="stat-label">Technologies</span>
            </div>
          </div>

          <div className="hero-cta">
            <button
              className="cta-button primary"
              onClick={() => handleSectionNavigation("work")}
            >
              <span>View My Work</span>
              <svg className="button-icon" viewBox="0 0 24 24" fill="none">
                <path
                  d="M7 17L17 7M17 7H7M17 7V17"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </button>
            <button
              className="cta-button secondary"
              onClick={() => handleSectionNavigation("contact")}
            >
              <span>Let's Connect</span>
              <svg className="button-icon" viewBox="0 0 24 24" fill="none">
                <path
                  d="M8 12H16M12 8V16"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </button>
          </div>
        </div>

        <div className="scroll-indicator">
          <div className="scroll-mouse">
            <div className="scroll-wheel"></div>
          </div>
          <span className="scroll-text">Scroll to explore</span>
        </div>
      </header>

      <div className="terminal-window">
        <div className="terminal-header">
          <span className="window-dot" style={{ background: "#f87171" }}></span>
          <span className="window-dot" style={{ background: "#fbbd23" }}></span>
          <span className="window-dot" style={{ background: "#34d399" }}></span>
          <div className="terminal-title">
            {portfolioData.name.toLowerCase().replace(" ", "-")}-portfolio
          </div>
        </div>
        <main id="main-content" role="main">
          <section id="about" className="section">
            <h2 className="section-subtitle">About Me</h2>
            <h3 className="section-title font-sans">
              {portfolioData.aboutTagline}
            </h3>
            <p className="text-lg md:text-xl max-w-4xl leading-relaxed">
              {portfolioData.aboutContent}
            </p>
          </section>

          <section id="experience" className="section">
            <h2 className="section-subtitle">Experience</h2>
            <h3 className="section-title font-sans">
              Where I've left my digital footprint.
            </h3>
            <div className="experience-timeline">
              {portfolioData.experience.map((item) => (
                <div className="experience-item" key={item.company}>
                  <div className="experience-date">{item.date}</div>
                  <h4 className="experience-role">
                    {item.role} @{" "}
                    <span className="experience-company">{item.company}</span>
                  </h4>
                  <p className="experience-desc">{item.description}</p>
                </div>
              ))}
            </div>
          </section>

          <section id="toolkit" className="section">
            <h2 className="section-subtitle">Toolkit</h2>
            <h3 className="section-title font-sans">My digital arsenal.</h3>
            <div className="toolkit-grid">
              {skills
                .filter(skill => skill.is_active)
                .sort((a, b) => a.sort_order - b.sort_order)
                .map((skill) => (
                <SkillBar 
                  key={skill.id} 
                  name={skill.name} 
                  level={skill.level} 
                  label={skill.label} 
                />
              ))}
            </div>
          </section>

          <section id="work" className="section">
            <h2 className="section-subtitle">Work</h2>
            <h3 className="section-title font-sans">
              Missions I've completed.
            </h3>
            <div className="project-grid">
              {projects
                .filter(project => project.is_active)
                .sort((a, b) => a.sort_order - b.sort_order)
                .map((project) => (
                <ProjectCard 
                  key={project.id} 
                  title={project.title}
                  description={project.description}
                  tags={project.tags}
                  link={project.link || '#'}
                />
              ))}
            </div>
          </section>

          <section id="socials" className="section text-center">
            <h2 className="section-subtitle justify-center">Socials</h2>
            <h3 className="section-title font-sans">Find me on the grid.</h3>
            <div className="social-links-grid">
              {portfolioData.socials.map((social) => {
                const IconComponent = socialIcons[social.title];
                return (
                  <SocialLink
                    key={social.title}
                    href={social.href}
                    title={social.title}
                    platform={social.title}
                  >
                    {IconComponent && <IconComponent />}
                  </SocialLink>
                );
              })}
            </div>
          </section>

          <section id="contact" className="section text-center">
            <h2 className="section-subtitle justify-center">Contact</h2>
            <h3 className="section-title font-sans">Let's build the future.</h3>
            <a href={`mailto:${portfolioData.email}`} className="contact-link">
              {portfolioData.email}
            </a>
          </section>
        </main>
        <footer className="footer">
          <div className="copy-tooltip-wrapper">
            <span
              className={`copy-tooltip ${copyTooltipVisible ? "visible" : ""}`}
            >
              Copied!
            </span>
            <p>
              &copy; {currentYear} {portfolioData.name}.
            </p>
            <button
              onClick={() => handleCopy(portfolioData.name)}
              className="copy-button"
              title="Copy Name"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75"
                />
              </svg>
            </button>
          </div>
          <p className="mt-2">STATUS: AWAITING_CONNECTION</p>
        </footer>
      </div>
    </div>
  );
};

const Portfolio: React.FC = () => {
  return (
    <AppProvider>
      <PortfolioContent />
      <NotificationSystem />
    </AppProvider>
  );
};

export default Portfolio;
